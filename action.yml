name: "Google Cloud SQL Unix Socket Proxy"
description: "Start Google CloudSQL Proxy using unix socket. Based on https://github.com/mattes/gce-cloudsql-proxy-action"

branding:
  icon: "database"
  color: "red"

inputs:
  project_id:
    description: GCP project id
    required: true
  service_account_key:
    description: GCP service account key
    required: true
  creds:
    description: "Contents of a Service Account JSON Key"
    required: true
  dir:
    description: "directory for socket"
    required: false
    default: "/tmp/gce-cloudsql-proxy"
  instance:
    description: "CloudSQL instance"
    required: true
  port:
    description: "Listen on port"
    required: false
    default: 5432
  proxy_version:
    description: "CloudSQL Proxy Version"
    required: false
    default: 1.21.0

runs:
  using: "composite"
  steps:

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ inputs.project_id }}
        service_account_key: ${{ inputs.service_account_key }}
        export_default_credentials: true

    - name: Start Google Cloud SQL Proxy
      shell: bash
      run: |
        # start container
        docker run -d --net host --name gce-cloudsql-proxy --restart on-failure \
        gcr.io/cloudsql-docker/gce-proxy:${{ inputs.proxy_version }} \
        /cloud_sql_proxy \
          -dir=${{ inputs.dir }} \
          -instances=${{ inputs.instance }}

        # wait until connections are accepted
        sleep 3
        isready=0
        for i in {1..10}; do
          echo "Wait for connections to be ready (PORT: ${{ inputs.port }}) ... $i/10"
          (${{ github.action_path }}/wait-for-it.sh --quiet --timeout=3 --host=127.0.0.1 --port=${{ inputs.port }} || exit $?) && true # escape bash's pipefail
          isready=$?
          if [[ $isready -eq 0 ]]; then
            break
          fi
          sleep 2
        done

        # print container logs
        docker logs gce-cloudsql-proxy

        # exit with error code if we couldn't connect
        if [[ $isready -ne 0 ]]; then
          exit $isready 
        fi
